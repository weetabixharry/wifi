close all; clear all; clc;

% This script works through Annex G of the standard (p1079 in my version).

% Make sure we can see the helper subroutines
addpath('modulator helpers');

% ====================== %
% == G.1 Introduction == %
% ====================== %

% "This example uses the 36 Mb/s data rate..."
rate_info_lut = get_rate_info();
rate_info = rate_info_lut(6);

% "... and a message of 100 octets"
length_bytes = 100;

% ===================== %
% == G.2 The Message == %
% ===================== %

% The 72-character message
a = ['Joy, bright spark of divinity,' char(10) 'Daughter of Elysium,' char(10) 'Fire-insired we trea'];

% [Table G.1] The 100-byte PSDU in hex
% Comprises: 24-Byte MAC + 72-Byte DATA + 4-Byte CRC.
b = [...
'0402002e00';
'6008cd37a6';
'0020d6013c';
'f1006008ad';
'3baf00004a';
'6f792c2062';
'7269676874';
'2073706172';
'6b206f6620';
'646976696e';
'6974792c0a';
'4461756768';
'746572206f';
'6620456c79';
'7369756d2c';
'0a46697265';
'2d696e7369';
'7265642077';
'6520747265';
'61da5799ed']; % N.B. This FCS is *INCORRECT* (see: IEEE 802.11-09/0042r0)

% Gradually manipulate PSDU into vector of bytes
b = reshape(b.',[],1);
psdu_hex = reshape(b, 2, []).';
psdu_dec = hex2dec(psdu_hex);

% Separate PSDU into MAC header, message and CRC
mac_header_dec = psdu_dec(1:24);
message_dec = psdu_dec(25:end-4);
crc_dec = psdu_dec(end-3:end); % N.B. INCORRECT (see IEEE 802.11-09/0042r0)

% Sanity check message content
message_char = char(message_dec).';
assert(isequal(message_char, a));

% ==================================== %
% == G.3 Generation of the preamble == %
% ==================================== %

% ---------------------------- %
% -- G.3.1 Short sequences  -- %
% ---------------------------- %

% [Table G.2] Frequency domain representation of the short sequences.
% Note: We'll use better precision here: sqrt(13/6) instead of 1.472.
p = 1+1j;
STF_26 = sqrt(13/6)*[0, 0, +p, 0, 0, 0, -p, 0, ...
                     0, 0, +p, 0, 0, 0, -p, 0, ...
                     0, 0, -p, 0, 0, 0, +p, 0, ...
                     0, 0,  0, 0, 0, 0, -p, 0, ...
                     0, 0, -p, 0, 0, 0, +p, 0, ...
                     0, 0, +p, 0, 0, 0, +p, 0, ...
                     0, 0, +p, 0, 0].';
% Zero-pad up to OFDM symbol size
table_G2 = [0*(-32:-27).'; STF_26; 0*(27:31).'];

% FFT shift to put DC where it belongs and do OFDM IFFT
stf_64 = ifft(fftshift(table_G2));

% [Table G.3] One period of IFFT of the short sequences
table_G3 = [
0 0.046 0.046 1 -0.132 0.002 2 -0.013 -0.079 3 0.143 -0.013
4 0.092 0.000 5 0.143 -0.013 6 -0.013 -0.079 7 -0.132 0.002
8 0.046 0.046 9 0.002 -0.132 10 -0.079 -0.013 11 -0.013 0.143
12 0.000 0.092 13 -0.013 0.143 14 -0.079 -0.013 15 0.002 -0.132
16 0.046 0.046 17 -0.132 0.002 18 -0.013 -0.079 19 0.143 -0.013
20 0.092 0.000 21 0.143 -0.013 22 -0.013 -0.079 23 -0.132 0.002
24 0.046 0.046 25 0.002 -0.132 26 -0.079 -0.013 27 -0.013 0.143
28 0.000 0.092 29 -0.013 0.143 30 -0.079 -0.013 31 0.002 -0.132
32 0.046 0.046 33 -0.132 0.002 34 -0.013 -0.079 35 0.143 -0.013
36 0.092 0.000 37 0.143 -0.013 38 -0.013 -0.079 39 -0.132 0.002
40 0.046 0.046 41 0.002 -0.132 42 -0.079 -0.013 43 -0.013 0.143
44 0.000 0.092 45 -0.013 0.143 46 -0.079 -0.013 47 0.002 -0.132
48 0.046 0.046 49 -0.132 0.002 50 -0.013 -0.079 51 0.143 -0.013
52 0.092 0.000 53 0.143 -0.013 54 -0.013 -0.079 55 -0.132 0.002
56 0.046 0.046 57 0.002 -0.132 58 -0.079 -0.013 59 -0.013 0.143
60 0.000 0.092 61 -0.013 0.143 62 -0.079 -0.013 63 0.002 -0.132];
% Discard columns of indices
table_G3(:,[1,4,7,10]) = [];
% Convert to complex
table_G3 = complex(table_G3(:,1:2:end), table_G3(:,2:2:end));
% Stack in order
table_G3 = reshape(table_G3.', [], 1);

% Sanity check (up to 3 decimal places)
table_G3_err = stf_64 - table_G3;
table_G3_err = [real(table_G3_err); imag(table_G3_err)];
assert(all(abs(table_G3_err) < 0.001));

% Extend periodically up to 161 samples. N.B. We don't need to do anything
% else for STF due to its 16-sample periodicity.
stf_161 = repmat(stf_64, ceil(161/64), 1);
stf_161 = stf_161(1:161);
% Apply window function
stf_161(1) = 0.5 * stf_161(1);
stf_161(161) = 0.5 * stf_161(161);

% [Table G.4] Time domain representation of the short sequence
table_G4 = [
0 0.023 0.023 1 -0.132 0.002 2 -0.013 -0.079 3 0.143 -0.013
4 0.092 0.000 5 0.143 -0.013 6 -0.013 -0.079 7 -0.132 0.002
8 0.046 0.046 9 0.002 -0.132 10 -0.079 -0.013 11 -0.013 0.143
12 0.000 0.092 13 -0.013 0.143 14 -0.079 -0.013 15 0.002 -0.132
16 0.046 0.046 17 -0.132 0.002 18 -0.013 -0.079 19 0.143 -0.013
20 0.092 0.000 21 0.143 -0.013 22 -0.013 -0.079 23 -0.132 0.002
24 0.046 0.046 25 0.002 -0.132 26 -0.079 -0.013 27 -0.013 0.143
28 0.000 0.092 29 -0.013 0.143 30 -0.079 -0.013 31 0.002 -0.132
32 0.046 0.046 33 -0.132 0.002 34 -0.013 -0.079 35 0.143 -0.013
36 0.092 0.000 37 0.143 -0.013 38 -0.013 -0.079 39 -0.132 0.002
40 0.046 0.046 41 0.002 -0.132 42 -0.079 -0.013 43 -0.013 0.143
44 0.000 0.092 45 -0.013 0.143 46 -0.079 -0.013 47 0.002 -0.132
48 0.046 0.046 49 -0.132 0.002 50 -0.013 -0.079 51 0.143 -0.013
52 0.092 0.000 53 0.143 -0.013 54 -0.013 -0.079 55 -0.132 0.002
56 0.046 0.046 57 0.002 -0.132 58 -0.079 -0.013 59 -0.013 0.143
60 0.000 0.092 61 -0.013 0.143 62 -0.079 -0.013 63 0.002 -0.132
64 0.046 0.046 65 -0.132 0.002 66 -0.013 -0.079 67 0.143 -0.013
68 0.092 0.000 69 0.143 -0.013 70 -0.013 -0.079 71 -0.132 0.002
72 0.046 0.046 73 0.002 -0.132 74 -0.079 -0.013 75 -0.013 0.143
76 0.000 0.092 77 -0.013 0.143 78 -0.079 -0.013 79 0.002 -0.132
80 0.046 0.046 81 -0.132 0.002 82 -0.013 -0.079 83 0.143 -0.013
84 0.092 0.000 85 0.143 -0.013 86 -0.013 -0.079 87 -0.132 0.002
88 0.046 0.046 89 0.002 -0.132 90 -0.079 -0.013 91 -0.013 0.143
92 0.000 0.092 93 -0.013 0.143 94 -0.079 -0.013 95 0.002 -0.132
96 0.046 0.046 97 -0.132 0.002 98 -0.013 -0.079 99 0.143 -0.013
100 0.092 0.000 101 0.143 -0.013 102 -0.013 -0.079 103 -0.132 0.002
104 0.046 0.046 105 0.002 -0.132 106 -0.079 -0.013 107 -0.013 0.143
108 0.000 0.092 109 -0.013 0.143 110 -0.079 -0.013 111 0.002 -0.132
112 0.046 0.046 113 -0.132 0.002 114 -0.013 -0.079 115 0.143 -0.013
116 0.092 0.000 117 0.143 -0.013 118 -0.013 -0.079 119 -0.132 0.002
120 0.046 0.046 121 0.002 -0.132 122 -0.079 -0.013 123 -0.013 0.143
124 0.000 0.092 125 -0.013 0.143 126 -0.079 -0.013 127 0.002 -0.132
128 0.046 0.046 129 -0.132 0.002 130 -0.013 -0.079 131 0.143 -0.013
132 0.092 0.000 133 0.143 -0.013 134 -0.013 -0.079 135 -0.132 0.002
136 0.046 0.046 137 0.002 -0.132 138 -0.079 -0.013 139 -0.013 0.143
140 0.000 0.092 141 -0.013 0.143 142 -0.079 -0.013 143 0.002 -0.132
144 0.046 0.046 145 -0.132 0.002 146 -0.013 -0.079 147 0.143 -0.013
148 0.092 0.000 149 0.143 -0.013 150 -0.013 -0.079 151 -0.132 0.002
152 0.046 0.046 153 0.002 -0.132 154 -0.079 -0.013 155 -0.013 0.143
156 0.000 0.092 157 -0.013 0.143 158 -0.079 -0.013 159 0.002 -0.132
160 0.023 0.023 000 000000 00000 000 000000 000000 000 00000 000000];
% Discard columns of indices
table_G4(:,[1,4,7,10]) = [];
% Convert to complex
table_G4 = complex(table_G4(:,1:2:end), table_G4(:,2:2:end));
% Stack in order
table_G4 = reshape(table_G4.', [], 1);
% Discard zero-padding at the end
table_G4 = table_G4(1:161);

% Sanity check (up to 3 decimal places)
table_G4_err = stf_161 - table_G4;
table_G4_err = [real(table_G4_err); imag(table_G4_err)];
assert(all(abs(table_G4_err) < 0.001));

% --------------------------- %
% -- G.3.2 Long sequences  -- %
% --------------------------- %

% [Table G.5] Frequency domain representation of the long sequences
table_G5 = [
-32 0 0 -16 1 0 0 0 0 16 1 0
-31 0 0 -15 1 0 1 1 0 17 -1 0
-30 0 0 -14 1 0 2 -1 0 18 -1 0
-29 0 0 -13 1 0 3 -1 0 19 1 0
-28 0 0 -12 1 0 4 1 0 20 -1 0
-27 0 0 -11 -1 0 5 1 0 21 1 0
-26 1 0 -10 -1 0 6 -1 0 22 -1 0
-25 1 0 -9 1 0 7 1 0 23 1 0
-24 -1 0 -8 1 0 8 -1 0 24 1 0
-23 -1 0 -7 -1 0 9 1 0 25 1 0
-22 1 0 -6 1 0 10 -1 0 26 1 0
-21 1 0 -5 -1 0 11 -1 0 27 0 0
-20 -1 0 -4 1 0 12 -1 0 28 0 0
-19 1 0 -3 1 0 13 -1 0 29 0 0
-18 -1 0 -2 1 0 14 -1 0 30 0 0
-17 1 0 -1 1 0 15 1 0 31 0 0];
% Discard columns of indices
table_G5(:,[1,4,7,10]) = [];
% Convert to complex
table_G5 = complex(table_G5(:,1:2:end), table_G5(:,2:2:end));
% Stack in order
table_G5 = reshape(table_G5, [], 1);

% FFT shift to put DC where it belongs and do OFDM IFFT
ltf_64 = ifft(fftshift(table_G5));

% Extend periodically up to 161 samples...
ltf_161 = repmat(ltf_64, ceil(161/64), 1);
% Align such that ltf_64 ends on ltf_161(160)
ltf_161 = circshift(ltf_161, 160-64);
% Discard excess
ltf_161 = ltf_161(1:161);

% Apply window function
ltf_161(1) = 0.5 * ltf_161(1);
ltf_161(161) = 0.5 * ltf_161(161);

% [Table G.6] Time domain representation of the long sequence
table_G6 = [
0 -0.078 0.000 1 0.012 -0.098 2 0.092 -0.106 3 -0.092 -0.115
4 -0.003 -0.054 5 0.075 0.074 6 -0.127 0.021 7 -0.122 0.017
8 -0.035 0.151 9 -0.056 0.022 10 -0.060 -0.081 11 0.070 -0.014
12 0.082 -0.092 13 -0.131 -0.065 14 -0.057 -0.039 15 0.037 -0.098
16 0.062 0.062 17 0.119 0.004 18 -0.022 -0.161 19 0.059 0.015
20 0.024 0.059 21 -0.137 0.047 22 0.001 0.115 23 0.053 -0.004
24 0.098 0.026 25 -0.038 0.106 26 -0.115 0.055 27 0.060 0.088
28 0.021 -0.028 29 0.097 -0.083 30 0.040 0.111 31 -0.005 0.120
32 0.156 0.000 33 -0.005 -0.120 34 0.040 -0.111 35 0.097 0.083
36 0.021 0.028 37 0.060 -0.088 38 -0.115 -0.055 39 -0.038 -0.106
40 0.098 -0.026 41 0.053 0.004 42 0.001 -0.115 43 -0.137 -0.047
44 0.024 -0.059 45 0.059 -0.015 46 -0.022 0.161 47 0.119 -0.004
48 0.062 -0.062 49 0.037 0.098 50 -0.057 0.039 51 -0.131 0.065
52 0.082 0.092 53 0.070 0.014 54 -0.060 0.081 55 -0.056 -0.022
56 -0.035 -0.151 57 -0.122 -0.017 58 -0.127 -0.021 59 0.075 -0.074
60 -0.003 0.054 61 -0.092 0.115 62 0.092 0.106 63 0.012 0.098
64 -0.156 0.000 65 0.012 -0.098 66 0.092 -0.106 67 -0.092 -0.115
68 -0.003 -0.054 69 0.075 0.074 70 -0.127 0.021 71 -0.122 0.017
72 -0.035 0.151 73 -0.056 0.022 74 -0.060 -0.081 75 0.070 -0.014
76 0.082 -0.092 77 -0.131 -0.065 78 -0.057 -0.039 79 0.037 -0.098
80 0.062 0.062 81 0.119 0.004 82 -0.022 -0.161 83 0.059 0.015
84 0.024 0.059 85 -0.137 0.047 86 0.001 0.115 87 0.053 -0.004
88 0.098 0.026 89 -0.038 0.106 90 -0.115 0.055 91 0.060 0.088
92 0.021 -0.028 93 0.097 -0.083 94 0.040 0.111 95 -0.005 0.120
96 0.156 0.000 97 -0.005 -0.120 98 0.040 -0.111 99 0.097 0.083
100 0.021 0.028 101 0.060 -0.088 102 -0.115 -0.055 103 -0.038 -0.106
104 0.098 -0.026 105 0.053 0.004 106 0.001 -0.115 107 -0.137 -0.047
108 0.024 -0.059 109 0.059 -0.015 110 -0.022 0.161 111 0.119 -0.004
112 0.062 -0.062 113 0.037 0.098 114 -0.057 0.039 115 -0.131 0.065
116 0.082 0.092 117 0.070 0.014 118 -0.060 0.081 119 -0.056 -0.022
120 -0.035 -0.151 121 -0.122 -0.017 122 -0.127 -0.021 123 0.075 -0.074
124 -0.003 0.054 125 -0.092 0.115 126 0.092 0.106 127 0.012 0.098
128 -0.156 0.000 129 0.012 -0.098 130 0.092 -0.106 131 -0.092 -0.115
132 -0.003 -0.054 133 0.075 0.074 134 -0.127 0.021 135 -0.122 0.017
136 -0.035 0.151 137 -0.056 0.022 138 -0.060 -0.081 139 0.070 -0.014
140 0.082 -0.092 141 -0.131 -0.065 142 -0.057 -0.039 143 0.037 -0.098
144 0.062 0.062 145 0.119 0.004 146 -0.022 -0.161 147 0.059 0.015
148 0.024 0.059 149 -0.137 0.047 150 0.001 0.115 151 0.053 -0.004
152 0.098 0.026 153 -0.038 0.106 154 -0.115 0.055 155 0.060 0.088
156 0.021 -0.028 157 0.097 -0.083 158 0.040 0.111 159 -0.005 0.120
160 0.078 0.000  000 00000 000000 000 00000 00000 000 000000 00000];
% Discard columns of indices
table_G6(:,[1,4,7,10]) = [];
% Convert to complex
table_G6 = complex(table_G6(:,1:2:end), table_G6(:,2:2:end));
% Stack in order
table_G6 = reshape(table_G6.', [], 1);
% Discard zero-padding at the end
table_G6 = table_G6(1:161);

% Sanity check (up to 3 decimal places)
table_G6_err = ltf_161 - table_G6;
table_G6_err = [real(table_G6_err); imag(table_G6_err)];
assert(all(abs(table_G6_err) < 0.001));

% ========================= %
% == G.4 Generating SIG  == %
% ========================= %

% [Table G.7] Bit assignment for SIGNAL field
table_G7 = [
0 1 12 0
1 0 13 0
2 1 14 0
3 1 15 0
4 0 16 0
5 0 17 0
6 0 18 0
7 1 19 0
8 0 20 0
9 0 21 0
10 1 22 0
11 1 23 0];
% Discard columns of indices
table_G7(:,[1,3]) = [];
% Stack in order
table_G7 = reshape(table_G7, [], 1);

% Separate out the SIG components
table_G7_rate = table_G7(1:4);
table_G7_length = table_G7(6:17);
table_G7_parity = table_G7(18);
table_G7_tail = table_G7(19:24);

% TRUE values for SIG fields
true_rate = str2num(rate_info.RATE.'); %#ok 36 Mbps (see G.1) => "1011".
true_length = de2bi(length_bytes, 12).'; % 100 bytes (see G.1). 12-bit field.
true_parity = mod(sum(table_G7(1:17)), 2); % Even parity (see 17.3.4.3)
true_tail = zeros(6,1); % Tail is always 6 zeros (see 17.3.4.3)

% Sanity checks
assert(isequal(table_G7_rate, true_rate));
assert(isequal(table_G7_length, true_length));
assert(isequal(table_G7_parity, true_parity));
assert(isequal(table_G7_tail, true_tail)); 

% ---------------------------------------- %
% -- G.4.2 Coding the SIGNAL field bits -- %
% ---------------------------------------- %

% BCC encode SIG
encoded_sig = bcc_encode(table_G7);

% [Table G.8] SIGNAL field bits after encoding
table_G8 = [
0 1 8 1 16 0 24 0 32 0 40 0
1 1 9 0 17 0 25 0 33 1 41 0
2 0 10 1 18 0 26 1 34 1 42 0
3 1 11 0 19 0 27 1 35 1 43 0
4 0 12 0 20 0 28 1 36 0 44 0
5 0 13 0 21 0 29 1 37 0 45 0
6 0 14 0 22 1 30 1 38 0 46 0
7 1 15 1 23 0 31 0 39 0 47 0];
% Discard columns of indices
table_G8(:,1:2:end) = [];
% Stack in order
table_G8 = reshape(table_G8, [], 1);

% Sanity check
assert(isequal(table_G8, encoded_sig));

% ---------------------------------------------- %
% -- G.4.3 Interleaving the SIGNAL field bits -- %
% ---------------------------------------------- %

% Interleave SIG
interleaved_sig = interleave(encoded_sig, 1);

% [Table G.9] SIGNAL field bits after interleaving
table_G9 = [
0 1 8 1 16 0 24 1 32 0 40 1
1 0 9 1 17 0 25 0 33 0 41 0
2 0 10 0 18 0 26 0 34 1 42 0
3 1 11 1 19 1 27 0 35 0 43 1
4 0 12 0 20 0 28 0 36 0 44 0
5 1 13 0 21 1 29 0 37 1 45 1
6 0 14 0 22 0 30 1 38 0 46 0
7 0 15 0 23 0 31 1 39 0 47 0];
% Discard columns of indices
table_G9(:,1:2:end) = [];
% Stack in order
table_G9 = reshape(table_G9, [], 1);

% Sanity check
assert(isequal(table_G9, interleaved_sig));

% ----------------------------------------- %
% -- G.4.4 SIGNAL field frequency domain -- %
% ----------------------------------------- %

% Map SIG
mapped_sig = map_qam(interleaved_sig.');

% Data bins are -26:26, excluding DC (0) and pilots (-21,-7,7,21)
data_subcarrs = [-26:-22, -20:-8, -6:-1, 1:6, 8:20, 22:26];

% Pilot tones are defined in Equation 17-24
pilot_subcarrs = [-21,-7,7,21];
pilot_values = [1,1,1,-1];

% Pilot polarities are defined in Equation 17-25 (first entry is for SIG)
p127 = [1,1,1,1,  -1,-1,-1,1,  -1,-1,-1,-1,  1,1,-1,1, -1,-1,1,1,  -1,1,1,-1,  1,1,1,1,  1,1,-1,1, ...
1,1,-1,1,  1,-1,-1,1,   1,1,-1,1,  -1,-1,-1,1,  -1,1,-1,-1,  1,-1,-1,1,  1,1,1,1,  -1,-1,1,1, ...
-1,-1,1,-1,  1,-1,1,1,  -1,-1,-1,1,  1,-1,-1,-1,  -1,1,-1,-1,  1,-1,1,1,  1,1,-1,1,  -1,1,-1,1, ...
-1,-1,-1,-1,  -1,1,-1,1,  1,-1,1,-1,  1,1,1,-1,  -1,1,-1,-1,  -1,1,1,1,  -1,-1,-1,-1,  -1,-1,-1];

% Populate SIG OFDM symbol
ofdm_sig = zeros(64,1);
ofdm_sig(data_subcarrs+33) = mapped_sig;
ofdm_sig(pilot_subcarrs+33) = pilot_values * p127(1);

% [Table G.11] Frequency domain representation of SIGNAL field with pilots
table_G11 = [
-32 0.000 0.000 -16 1.000 0.000 0 0.000 0.000 16 -1.000 0.000
-31 0.000 0.000 -15 -1.000 0.000 1 1.000 0.000 17 -1.000 0.000
-30 0.000 0.000 -14 1.000 0.000 2 -1.000 0.000 18 1.000 0.000
-29 0.000 0.000 -13 -1.000 0.000 3 -1.000 0.000 19 -1.000 0.000
-28 0.000 0.000 -12 -1.000 0.000 4 -1.000 0.000 20 -1.000 0.000
-27 0.000 0.000 -11 -1.000 0.000 5 -1.000 0.000 21 -1.000 0.000
-26 1.000 0.000 -10 -1.000 0.000 6 -1.000 0.000 22 1.000 0.000
-25 -1.000 0.000 -9 -1.000 0.000 7 1.000 0.000 23 -1.000 0.000
-24 -1.000 0.000 -8 -1.000 0.000 8 1.000 0.000 24 1.000 0.000
-23 1.000 0.000 -7 1.000 0.000 9 1.000 0.000 25 -1.000 0.000
-22 -1.000 0.000 -6 -1.000 0.000 10 -1.000 0.000 26 -1.000 0.000
-21 1.000 0.000 -5 1.000 0.000 11 -1.000 0.000 27 0.000 0.000
-20 1.000 0.000 -4 -1.000 0.000 12 1.000 0.000 28 0.000 0.000
-19 -1.000 0.000 -3 1.000 0.000 13 -1.000 0.000 29 0.000 0.000
-18 -1.000 0.000 -2 -1.000 0.000 14 -1.000 0.000 30 0.000 0.000
-17 1.000 0.000 -1 -1.000 0.000 15 1.000 0.000 31 0.000 0.000];
% Discard columns of indices
table_G11(:,1:3:end) = [];
% Convert to complex
table_G11 = complex(table_G11(:,1:2:end),table_G11(:,2:2:end));
% Stack in order
table_G11 = reshape(table_G11, [], 1);

% Sanity check
assert(isequal(table_G11, ofdm_sig));

% ------------------------------------ %
% -- G.4.5 SIGNAL field time domain -- %
% ------------------------------------ %

% Convert to time-domain representation (with cyclic prefix and overlap)
time_sig = ofdm_ifft(ofdm_sig);

table_G12 = [
0 0.031 0.000 1 0.033 -0.044 2 -0.002 -0.038 3 -0.081 0.084
4 0.007 -0.100 5 -0.001 -0.113 6 -0.021 -0.005 7 0.136 -0.105
8 0.098 -0.044 9 0.011 -0.002 10 -0.033 0.044 11 -0.060 0.124
12 0.010 0.097 13 0.000 -0.008 14 0.018 -0.083 15 -0.069 0.027
16 -0.219 0.000 17 -0.069 -0.027 18 0.018 0.083 19 0.000 0.008
20 0.010 -0.097 21 -0.060 -0.124 22 -0.033 -0.044 23 0.011 0.002
24 0.098 0.044 25 0.136 0.105 26 -0.021 0.005 27 -0.001 0.113
28 0.007 0.100 29 -0.081 -0.084 30 -0.002 0.038 31 0.033 0.044
32 0.062 0.000 33 0.057 0.052 34 0.016 0.174 35 0.035 0.116
36 -0.051 -0.202 37 0.011 0.036 38 0.089 0.209 39 -0.049 -0.008
40 -0.035 0.044 41 0.017 -0.059 42 0.053 -0.017 43 0.099 0.100
44 0.034 -0.148 45 -0.003 -0.094 46 -0.120 0.042 47 -0.136 -0.070
48 -0.031 0.000 49 -0.136 0.070 50 -0.120 -0.042 51 -0.003 0.094
52 0.034 0.148 53 0.099 -0.100 54 0.053 0.017 55 0.017 0.059
56 -0.035 -0.044 57 -0.049 0.008 58 0.089 -0.209 59 0.011 -0.036
60 -0.051 0.202 61 0.035 -0.116 62 0.016 -0.174 63 0.057 -0.052
64 0.062 0.000 65 0.033 -0.044 66 -0.002 -0.038 67 -0.081 0.084
68 0.007 -0.100 69 -0.001 -0.113 70 -0.021 -0.005 71 0.136 -0.105
72 0.098 -0.044 73 0.011 -0.002 74 -0.033 0.044 75 -0.060 0.124
76 0.010 0.097 77 0.000 -0.008 78 0.018 -0.083 79 -0.069 0.027
80 -0.109 0.000 0 00000 000000 00 00000 000000 00 000000 00000];
% Discard columns of indices
table_G12(:,1:3:end) = [];
% Convert to complex
table_G12 = complex(table_G12(:,1:2:end),table_G12(:,2:2:end));
% Stack in order
table_G12 = reshape(table_G12.', [], 1);
% Discard zero-padding
table_G12 = table_G12(1:81);

% Sanity check (up to 3 decimal places)
table_G12_err = time_sig - table_G12;
table_G12_err = [real(table_G12_err); imag(table_G12_err)];
assert(all(abs(table_G12_err) < 0.001));

% ================================== %
% == G.5 Generating the DATA bits == %
% ================================== %

% ------------------------------------------------------------------- %
% -- G.5.1 Delineating, SERVICE field prepending, and zero padding -- %
% ------------------------------------------------------------------- %

% Number of required bits
Nservice = 16;
Nmsg = length_bytes*8;
Ntail = 6;
Nbits = Nservice + Nmsg + Ntail;

% Round up to integer number of OFDM symbols
Ndbps = rate_info.Ndbps;
Nsyms = ceil(Nbits/Ndbps);
Ntotal = Nsyms * Ndbps;

% Delineate PSDU bytes --> bits
psdu_bin = de2bi(psdu_dec, 8, 'right-msb');
psdu_bin = reshape(psdu_bin.', [], 1);

% Prepend SERVICE, append TAIL and zero-padding
data = zeros(Ntotal,1);
data(Nservice+(1:Nmsg)) = psdu_bin;

% [Table G.13] First 144 DATA bits
table_G13 = [
0 0 24 0 48 0 72 1 96 0 120 1
1 0 25 1 49 0 73 0 97 0 121 0
2 0 26 0 50 0 74 1 98 0 122 0
3 0 27 0 51 0 75 1 99 0 123 0
4 0 28 0 52 0 76 0 100 0 124 0
5 0 29 0 53 0 77 0 101 0 125 0
6 0 30 0 54 0 78 1 102 0 126 0
7 0 31 0 55 0 79 1 103 0 127 0
8 0 32 0 56 0 80 1 104 0 128 0
9 0 33 0 57 0 81 1 105 0 129 0
10 0 34 0 58 0 82 1 106 0 130 1
11 0 35 0 59 0 83 0 107 0 131 1
12 0 36 0 60 0 84 1 108 0 132 1
13 0 37 0 61 1 85 1 109 1 133 1
14 0 38 0 62 1 86 0 110 0 134 0
15 0 39 0 63 0 87 0 111 0 135 0
16 0 40 0 64 0 88 0 112 0 136 1
17 0 41 1 65 0 89 1 113 1 137 0
18 1 42 1 66 0 90 1 114 1 138 0
19 0 43 1 67 1 91 0 115 0 139 0
20 0 44 0 68 0 92 0 116 1 140 1
21 0 45 1 69 0 93 1 117 0 141 1
22 0 46 0 70 0 94 0 118 1 142 1
23 0 47 0 71 0 95 1 119 1 143 1];
% Discard columns of indices
table_G13(:,1:2:end) = [];
% Stack in order
table_G13 = reshape(table_G13, [], 1);

% Sanity check
assert(isequal(table_G13, data(1:144)));

% [Table G.14] First 144 DATA bits
table_G14 = [
720 0 744 0 768 1 792 1 816 0 840 0
721 0 745 0 769 0 793 1 817 0 841 0
722 0 746 0 770 1 794 1 818 0 842 0
723 0 747 0 771 0 795 0 819 0 843 0
724 0 748 0 772 0 796 1 820 0 844 0
725 1 749 1 773 1 797 0 821 0 845 0
726 0 750 0 774 1 798 1 822 0 846 0
727 0 751 0 775 0 799 0 823 0 847 0
728 1 752 0 776 1 800 1 824 0 848 0
729 1 753 0 777 0 801 0 825 0 849 0
730 1 754 1 778 0 802 0 826 0 850 0
731 0 755 0 779 0 803 1 827 0 851 0
732 1 756 1 780 0 804 1 828 0 852 0
733 1 757 1 781 1 805 0 829 0 853 0
734 1 758 1 782 1 806 0 830 0 854 0
735 0 759 0 783 0 807 1 831 0 855 0
736 1 760 0 784 0 808 1 832 0 856 0
737 0 761 1 785 1 809 0 833 0 857 0
738 1 762 0 786 0 810 1 834 0 858 0
739 0 763 0 787 1 811 1 835 0 859 0
740 0 764 1 788 1 812 0 836 0 860 0
741 1 765 1 789 0 813 1 837 0 861 0
742 1 766 1 790 1 814 1 838 0 862 0
743 0 767 0 791 1 815 1 839 0 863 0];
% Discard columns of indices
table_G14(:,1:2:end) = [];
% Stack in order
table_G14 = reshape(table_G14, [], 1);

% Sanity check
assert(isequal(table_G14, data(end-143:end)));

% ---------------------- %
% -- G.5.2 Scrambling -- %
% ---------------------- %

% Initial scrambler state as specified in G.5.2
scrambler_init = str2num('1011101'.').'; %#ok

% Scramble
[scrambled_data, scramble_pattern] = scramble(data, scrambler_init);

% [Table G.15] Scrambling sequence for seed 1011101
table_G15 = [
0 0 16 1 32 0 48 1 64 0 80 0 96 0 112 1
1 1 17 0 33 1 49 1 65 1 81 0 97 0 113 0
2 1 18 1 34 1 50 1 66 1 82 1 98 1 114 0
3 0 19 0 35 0 51 1 67 1 83 1 99 0 115 1
4 1 20 1 36 1 52 0 68 0 84 1 100 0 116 1
5 1 21 0 37 0 53 1 69 0 85 0 101 1 117 0
6 0 22 0 38 0 54 0 70 0 86 1 102 0 118 0
7 0 23 1 39 0 55 0 71 1 87 1 103 0 119 0
8 0 24 1 40 0 56 1 72 1 88 1 104 0 120 1
9 0 25 1 41 1 57 0 73 1 89 1 105 0 121 0
10 0 26 0 42 0 58 1 74 1 90 0 106 0 122 1
11 1 27 0 43 1 59 0 75 1 91 0 107 0 123 1
12 1 28 1 44 0 60 0 76 1 92 1 108 1 124 1
13 0 29 1 45 1 61 0 77 1 93 0 109 0 125 0
14 0 30 1 46 0 62 1 78 0 94 1 110 0 126 1
15 1 31 1 47 1 63 1 79 0 95 1 111 0 000 0];
% Discard columns of indices
table_G15(:,1:2:end) = [];
% Stack in order
table_G15 = reshape(table_G15, [], 1);
% Discard zero padding
table_G15 = table_G15(1:127);

% Sanity check
assert(isequal(table_G15, scramble_pattern));

% [Table G.16] First 144 bits after scrambling
table_G16 = [
0 0 24 1 48 1 72 0 96 0 120 0
1 1 25 0 49 1 73 1 97 0 121 0
2 1 26 0 50 1 74 0 98 1 122 1
3 0 27 0 51 1 75 0 99 0 123 1
4 1 28 1 52 0 76 1 100 0 124 1
5 1 29 1 53 1 77 1 101 1 125 0
6 0 30 1 54 0 78 1 102 0 126 1
7 0 31 1 55 0 79 1 103 0 127 0
8 0 32 0 56 1 80 1 104 0 128 1
9 0 33 1 57 0 81 1 105 0 129 1
10 0 34 1 58 1 82 0 106 0 130 1
11 1 35 0 59 0 83 1 107 0 131 0
12 1 36 1 60 0 84 0 108 1 132 0
13 0 37 0 61 1 85 1 109 1 133 1
14 0 38 0 62 0 86 1 110 0 134 0
15 1 39 0 63 1 87 1 111 0 135 0
16 1 40 0 64 0 88 1 112 1 136 1
17 0 41 0 65 1 89 0 113 1 137 0
18 0 42 1 66 1 90 1 114 1 138 1
19 0 43 0 67 0 91 0 115 1 139 1
20 1 44 0 68 0 92 1 116 0 140 1
21 0 45 0 69 0 93 1 117 0 141 1
22 0 46 0 70 0 94 1 118 1 142 0
23 1 47 1 71 1 95 0 119 1 143 0];
% Discard columns of indices
table_G16(:,1:2:end) = [];
% Stack in order
table_G16 = reshape(table_G16, [], 1);

% Sanity check
assert(isequal(table_G16, scrambled_data(1:144)));

% [Table G.17] Last 144 bits after scrambling
table_G17 = [
720 0 744 0 768 1 792 0 816 0 840 0
721 1 745 0 769 0 793 0 817 0 841 0
722 1 746 0 770 1 794 1 818 1 842 0
723 1 747 1 771 0 795 1 819 0 843 0
724 1 748 0 772 0 796 0 820 1 844 1
725 1 749 1 773 0 797 0 821 0 845 1
726 0 750 1 774 0 798 0 822 0 846 1
727 1 751 1 775 0 799 0 823 0 847 0
728 1 752 0 776 1 800 1 824 1 848 1
729 0 753 0 777 1 801 0 825 1 849 1
730 0 754 1 778 1 802 0 826 0 850 1
731 0 755 1 779 0 803 0 827 1 851 1
732 1 756 1 780 1 804 1 828 1 852 0
733 0 757 0 781 1 805 1 829 1 853 0
734 1 758 0 782 0 806 0 830 0 854 1
735 0 759 1 783 0 807 0 831 0 855 0
736 0 760 0 784 0 808 1 832 0 856 1
737 0 761 0 785 0 809 1 833 1 857 1
738 1 762 0 786 1 810 0 834 1 858 0
739 0 763 1 787 0 811 0 835 1 859 0
740 0 764 0 788 1 812 1 836 1 860 1
741 1 765 1 789 0 813 0 837 1 861 0
742 1 766 0 790 0 814 1 838 1 862 0
743 1 767 1 791 0 815 0 839 1 863 1];
% Discard columns of indices
table_G17(:,1:2:end) = [];
% Stack in order
table_G17 = reshape(table_G17, [], 1);

% Sanity check
assert(isequal(table_G17, scrambled_data(end-143:end)));

% -------------------------------- %
% -- G.6.1 Coding the DATA bits -- %
% -------------------------------- %

% N.B. Zero the tail bits again before encoding (as per G.5.2)
scrambled_data(Nservice + Nmsg + (1:Ntail)) = 0;

% Encode
encoded_data = bcc_encode(scrambled_data);
punctured_data = puncture(encoded_data, rate_info.r);

% [Table G.18] Coded bits of first DATA symbol
table_G18 = [
0 0 32 1 64 0 96 1 128 1 160 1
1 0 33 0 65 1 97 0 129 1 161 1
2 1 34 0 66 0 98 0 130 0 162 1
3 0 35 1 67 0 99 0 131 0 163 0
4 1 36 1 68 1 100 1 132 0 164 0
5 0 37 1 69 0 101 1 133 0 165 0
6 1 38 0 70 1 102 1 134 0 166 0
7 1 39 1 71 0 103 1 135 0 167 0
8 0 40 1 72 1 104 1 136 0 168 1
9 0 41 0 73 1 105 1 137 1 169 1
10 0 42 1 74 1 106 0 138 0 170 0
11 0 43 1 75 1 107 0 139 0 171 1
12 1 44 0 76 1 108 0 140 0 172 0
13 0 45 1 77 0 109 0 141 0 173 0
14 0 46 0 78 1 110 0 142 1 174 1
15 0 47 1 79 1 111 0 143 1 175 1
16 1 48 1 80 1 112 1 144 1 176 1
17 0 49 0 81 1 113 1 145 1 177 1
18 1 50 0 82 1 114 0 146 1 178 1
19 0 51 1 83 0 115 0 147 0 179 0
20 0 52 1 84 1 116 1 148 0 180 1
21 0 53 0 85 0 117 0 149 0 181 0
22 0 54 1 86 0 118 0 150 0 182 1
23 1 55 0 87 0 119 0 151 0 183 1
24 1 56 0 88 1 120 0 152 0 184 1
25 1 57 0 89 1 121 1 153 0 185 0
26 1 58 0 90 0 122 1 154 0 186 1
27 1 59 1 91 0 123 1 155 1 187 1
28 0 60 1 92 0 124 0 156 1 188 0
29 0 61 1 93 0 125 0 157 0 189 0
30 0 62 0 94 1 126 1 158 0 190 1
31 0 63 1 95 0 127 1 159 1 191 0];
% Discard columns of indices
table_G18(:,1:2:end) = [];
% Stack in order
table_G18 = reshape(table_G18, [], 1);

% Sanity check
assert(isequal(table_G18, punctured_data(1:192)));

% -------------------------------------- %
% -- G.6.2 Interleaving the DATA bits -- %
% -------------------------------------- %

% Reshape so each column is coded bits for an OFDM symbol
interleaver_in = reshape(punctured_data, rate_info.Ncbps, []);

% Interleave
interleaved_data = interleave(interleaver_in, rate_info.Nbpsc);
interleaved_data = interleaved_data(:);

% [Table G.21] Interleaved bits of first DATA symbol
table_G21 = [
0 0 32 0 64 0 96 0 128 0 160 0
1 1 33 1 65 0 97 1 129 0 161 0
2 1 34 1 66 0 98 1 130 0 162 0
3 1 35 1 67 1 99 0 131 1 163 0
4 0 36 0 68 0 100 1 132 1 164 0
5 1 37 0 69 0 101 1 133 0 165 0
6 1 38 1 70 0 102 1 134 1 166 0
7 1 39 1 71 0 103 0 135 1 167 0
8 1 40 0 72 1 104 0 136 0 168 0
9 1 41 0 73 0 105 0 137 1 169 0
10 1 42 0 74 0 106 1 138 1 170 0
11 1 43 0 75 1 107 1 139 0 171 0
12 0 44 0 76 1 108 1 140 1 172 1
13 0 45 0 77 0 109 0 141 0 173 1
14 0 46 0 78 1 110 0 142 1 174 0
15 0 47 0 79 0 111 0 143 1 175 1
16 1 48 1 80 0 112 1 144 1 176 1
17 1 49 0 81 0 113 1 145 0 177 0
18 1 50 1 82 0 114 1 146 0 178 1
19 0 51 1 83 1 115 1 147 1 179 1
20 1 52 1 84 1 116 0 148 1 180 0
21 1 53 1 85 1 117 1 149 0 181 0
22 1 54 1 86 0 118 0 150 0 182 1
23 1 55 1 87 1 119 1 151 0 183 1
24 1 56 0 88 0 120 0 152 0 184 0
25 1 57 0 89 0 121 1 153 1 185 1
26 0 58 0 90 0 122 1 154 0 186 1
27 0 59 1 91 1 123 0 155 0 187 0
28 0 60 0 92 0 124 1 156 0 188 1
29 1 61 0 93 0 125 0 157 0 189 1
30 0 62 0 94 1 126 0 158 1 190 0
31 0 63 1 95 0 127 1 159 1 191 1];
% Discard columns of indices
table_G21(:,1:2:end) = [];
% Stack in order
table_G21 = reshape(table_G21, [], 1);

% Sanity check
assert(isequal(table_G21, interleaved_data(1:192)));

% -------------------------------- %
% -- G.6.3 Mapping into symbols -- %
% -------------------------------- %

% Map DATA (QAM)
mapper_in = reshape(interleaved_data, rate_info.Nbpsc, []);
mapped_data = map_qam(mapper_in);

% Populate data subcarriers
ofdm_data = zeros(64, Nsyms);
ofdm_data(data_subcarrs+33,:) = reshape(mapped_data, [], Nsyms);

% Populate pilot subcarriers
ip = 2; % N.B. Pilot polarity p127(1) was used for SIG
for sym = 1:Nsyms
    ofdm_data(pilot_subcarrs+33,sym) = pilot_values * p127(ip);
    if ip < 127
        ip = ip+1;
    else
        ip = 1;
    end
end

% [Table G.22] Frequency domain of first DATA symbol
table_G22 = [
-32 0.000 0.000 -16 -0.949 0.316 0 0.000 0.000 16 -0.316 -0.949
-31 0.000 0.000 -15 -0.949 -0.949 1 -0.316 0.949 17 -0.949 0.316
-30 0.000 0.000 -14 -0.949 -0.949 2 0.316 0.949 18 -0.949 -0.949
-29 0.000 0.000 -13 0.949 0.316 3 -0.949 0.316 19 -0.949 -0.949
-28 0.000 0.000 -12 0.316 0.316 4 0.949 -0.949 20 -0.949 -0.949
-27 0.000 0.000 -11 -0.949 -0.316 5 0.316 0.316 21 -1.000 0.000
-26 -0.316 0.316 -10 -0.949 -0.316 6 -0.316 -0.316 22 0.316 -0.316
-25 -0.316 0.316 -9 -0.949 -0.316 7 1.000 0.000 23 0.949 0.316
-24 0.316 0.316 -8 -0.949 -0.949 8 -0.316 0.949 24 -0.949 0.316
-23 -0.949 -0.949 -7 1.000 0.000 9 0.949 -0.316 25 -0.316 0.949
-22 0.316 0.949 -6 0.949 -0.316 10 -0.949 -0.316 26 0.316 -0.316
-21 1.000 0.000 -5 0.949 0.949 11 0.949 0.316 27 0.000 0.000
-20 0.316 0.316 -4 -0.949 -0.316 12 -0.316 0.949 28 0.000 0.000
-19 0.316 -0.949 -3 0.316 -0.316 13 0.949 0.316 29 0.000 0.000
-18 -0.316 -0.949 -2 -0.949 -0.316 14 0.949 -0.316 30 0.000 0.000
-17 -0.316 0.316 -1 -0.949 0.949 15 0.949 -0.949 31 0.000 0.000];
% Discard columns of indices
table_G22(:,1:3:end) = [];
% Convert to complex
table_G22 = complex(table_G22(:,1:2:end), table_G22(:,2:2:end));
% Stack in order
table_G22 = reshape(table_G22, [], 1);

% Sanity check (up to 3 decimal places)
table_G22_err = ofdm_data(1:64).' - table_G22;
table_G22_err = [real(table_G22_err); imag(table_G22_err)];
assert(all(abs(table_G22_err) < 0.001));

% =========================== %
% == G.8 The entire packet == %
% =========================== %

% Preamble sizes (excluding weighted overlap)
Nstf = 160;
Nltf = 160;
Nsig = 80;
Npreamble = Nstf + Nltf + Nsig;

% Construct preamble with weighted overlap
preamble = zeros(Npreamble+1, 1);
preamble(1:Nstf) = stf_161(1:Nstf);
preamble(Nstf+1) = stf_161(Nstf+1) + ltf_161(1);
preamble(Nstf+2:Nstf+Nltf) = ltf_161(2:Nltf);
preamble(Nstf+Nltf+1) = ltf_161(Nltf+1) + time_sig(1);
preamble(Nstf+Nltf+2:Npreamble+1) = time_sig(2:end);

% Pre-allocate storage for whole packet
Ndata = 80 * Nsyms;
whole_packet = zeros(Npreamble + Ndata + 1, 1);
whole_packet(1:Npreamble+1) = preamble;

% Append data symbols, with weighted overlap
for sym = 1:Nsyms
    data_sym = ofdm_ifft(ofdm_data(:,sym));
    whole_packet(Npreamble+(sym-1)*80+1) = whole_packet(Npreamble+(sym-1)*80+1) + data_sym(1);
    whole_packet(Npreamble+(sym-1)*80+(2:81)) = data_sym(2:end);
end
% Drop the final overlap sample
whole_packet(end) = [];

% [Table G.24] The entire packet
table_G24 = [
0 0.023 0.023 1 -0.132 0.002 2 -0.013 -0.079 3 0.143 -0.013
4 0.092 0.000 5 0.143 -0.013 6 -0.013 -0.079 7 -0.132 0.002
8 0.046 0.046 9 0.002 -0.132 10 -0.079 -0.013 11 -0.013 0.143
12 0.000 0.092 13 -0.013 0.143 14 -0.079 -0.013 15 0.002 -0.132
16 0.046 0.046 17 -0.132 0.002 18 -0.013 -0.079 19 0.143 -0.013
20 0.092 0.000 21 0.143 -0.013 22 -0.013 -0.079 23 -0.132 0.002
24 0.046 0.046 25 0.002 -0.132 26 -0.079 -0.013 27 -0.013 0.143
28 0.000 0.092 29 -0.013 0.143 30 -0.079 -0.013 31 0.002 -0.132
32 0.046 0.046 33 -0.132 0.002 34 -0.013 -0.079 35 0.143 -0.013
36 0.092 0.000 37 0.143 -0.013 38 -0.013 -0.079 39 -0.132 0.002
40 0.046 0.046 41 0.002 -0.132 42 -0.079 -0.013 43 -0.013 0.143
44 0.000 0.092 45 -0.013 0.143 46 -0.079 -0.013 47 0.002 -0.132
48 0.046 0.046 49 -0.132 0.002 50 -0.013 -0.079 51 0.143 -0.013
52 0.092 0.000 53 0.143 -0.013 54 -0.013 -0.079 55 -0.132 0.002
56 0.046 0.046 57 0.002 -0.132 58 -0.079 -0.013 59 -0.013 0.143
60 0.000 0.092 61 -0.013 0.143 62 -0.079 -0.013 63 0.002 -0.132
64 0.046 0.046 65 -0.132 0.002 66 -0.013 -0.079 67 0.143 -0.013
68 0.092 0.000 69 0.143 -0.013 70 -0.013 -0.079 71 -0.132 0.002
72 0.046 0.046 73 0.002 -0.132 74 -0.079 -0.013 75 -0.013 0.143
76 0.000 0.092 77 -0.013 0.143 78 -0.079 -0.013 79 0.002 -0.132
80 0.046 0.046 81 -0.132 0.002 82 -0.013 -0.079 83 0.143 -0.013
84 0.092 0.000 85 0.143 -0.013 86 -0.013 -0.079 87 -0.132 0.002
88 0.046 0.046 89 0.002 -0.132 90 -0.079 -0.013 91 -0.013 0.143
92 0.000 0.092 93 -0.013 0.143 94 -0.079 -0.013 95 0.002 -0.132
96 0.046 0.046 97 -0.132 0.002 98 -0.013 -0.079 99 0.143 -0.013
100 0.092 0.000 101 0.143 -0.013 102 -0.013 -0.079 103 -0.132 0.002
104 0.046 0.046 105 0.002 -0.132 106 -0.079 -0.013 107 -0.013 0.143
108 0.000 0.092 109 -0.013 0.143 110 -0.079 -0.013 111 0.002 -0.132
112 0.046 0.046 113 -0.132 0.002 114 -0.013 -0.079 115 0.143 -0.013
116 0.092 0.000 117 0.143 -0.013 118 -0.013 -0.079 119 -0.132 0.002
120 0.046 0.046 121 0.002 -0.132 122 -0.079 -0.013 123 -0.013 0.143
124 0.000 0.092 125 -0.013 0.143 126 -0.079 -0.013 127 0.002 -0.132
128 0.046 0.046 129 -0.132 0.002 130 -0.013 -0.079 131 0.143 -0.013
132 0.092 0.000 133 0.143 -0.013 134 -0.013 -0.079 135 -0.132 0.002
136 0.046 0.046 137 0.002 -0.132 138 -0.079 -0.013 139 -0.013 0.143
140 0.000 0.092 141 -0.013 0.143 142 -0.079 -0.013 143 0.002 -0.132
144 0.046 0.046 145 -0.132 0.002 146 -0.013 -0.079 147 0.143 -0.013
148 0.092 0.000 149 0.143 -0.013 150 -0.013 -0.079 151 -0.132 0.002
152 0.046 0.046 153 0.002 -0.132 154 -0.079 -0.013 155 -0.013 0.143
156 0.000 0.092 157 -0.013 0.143 158 -0.079 -0.013 159 0.002 -0.132
160 -0.055 0.023 161 0.012 -0.098 162 0.092 -0.106 163 -0.092 -0.115
164 -0.003 -0.054 165 0.075 0.074 166 -0.127 0.021 167 -0.122 0.017
168 -0.035 0.151 169 -0.056 0.022 170 -0.060 -0.081 171 0.070 -0.014
172 0.082 -0.092 173 -0.131 -0.065 174 -0.057 -0.039 175 0.037 -0.098
176 0.062 0.062 177 0.119 0.004 178 -0.022 -0.161 179 0.059 0.015
180 0.024 0.059 181 -0.137 0.047 182 0.001 0.115 183 0.053 -0.004
184 0.098 0.026 185 -0.038 0.106 186 -0.115 0.055 187 0.060 0.088
188 0.021 -0.028 189 0.097 -0.083 190 0.040 0.111 191 -0.005 0.120
192 0.156 0.000 193 -0.005 -0.120 194 0.040 -0.111 195 0.097 0.083
196 0.021 0.028 197 0.060 -0.088 198 -0.115 -0.055 199 -0.038 -0.106
200 0.098 -0.026 201 0.053 0.004 202 0.001 -0.115 203 -0.137 -0.047
204 0.024 -0.059 205 0.059 -0.015 206 -0.022 0.161 207 0.119 -0.004
208 0.062 -0.062 209 0.037 0.098 210 -0.057 0.039 211 -0.131 0.065
212 0.082 0.092 213 0.070 0.014 214 -0.060 0.081 215 -0.056 -0.022
216 -0.035 -0.151 217 -0.122 -0.017 218 -0.127 -0.021 219 0.075 -0.074
220 -0.003 0.054 221 -0.092 0.115 222 0.092 0.106 223 0.012 0.098
224 -0.156 0.000 225 0.012 -0.098 226 0.092 -0.106 227 -0.092 -0.115
228 -0.003 -0.054 229 0.075 0.074 230 -0.127 0.021 231 -0.122 0.017
232 -0.035 0.151 233 -0.056 0.022 234 -0.060 -0.081 235 0.070 -0.014
236 0.082 -0.092 237 -0.131 -0.065 238 -0.057 -0.039 239 0.037 -0.098
240 0.062 0.062 241 0.119 0.004 242 -0.022 -0.161 243 0.059 0.015
244 0.024 0.059 245 -0.137 0.047 246 0.001 0.115 247 0.053 -0.004
248 0.098 0.026 249 -0.038 0.106 250 -0.115 0.055 251 0.060 0.088
252 0.021 -0.028 253 0.097 -0.083 254 0.040 0.111 255 -0.005 0.120
256 0.156 0.000 257 -0.005 -0.120 258 0.040 -0.111 259 0.097 0.083
260 0.021 0.028 261 0.060 -0.088 262 -0.115 -0.055 263 -0.038 -0.106
264 0.098 -0.026 265 0.053 0.004 266 0.001 -0.115 267 -0.137 -0.047
268 0.024 -0.059 269 0.059 -0.015 270 -0.022 0.161 271 0.119 -0.004
272 0.062 -0.062 273 0.037 0.098 274 -0.057 0.039 275 -0.131 0.065
276 0.082 0.092 277 0.070 0.014 278 -0.060 0.081 279 -0.056 -0.022
280 -0.035 -0.151 281 -0.122 -0.017 282 -0.127 -0.021 283 0.075 -0.074
284 -0.003 0.054 285 -0.092 0.115 286 0.092 0.106 287 0.012 0.098
288 -0.156 0.000 289 0.012 -0.098 290 0.092 -0.106 291 -0.092 -0.115
292 -0.003 -0.054 293 0.075 0.074 294 -0.127 0.021 295 -0.122 0.017
296 -0.035 0.151 297 -0.056 0.022 298 -0.060 -0.081 299 0.070 -0.014
300 0.082 -0.092 301 -0.131 -0.065 302 -0.057 -0.039 303 0.037 -0.098
304 0.062 0.062 305 0.119 0.004 306 -0.022 -0.161 307 0.059 0.015
308 0.024 0.059 309 -0.137 0.047 310 0.001 0.115 311 0.053 -0.004
312 0.098 0.026 313 -0.038 0.106 314 -0.115 0.055 315 0.060 0.088
316 0.021 -0.028 317 0.097 -0.083 318 0.040 0.111 319 -0.005 0.120
320 0.109 0.000 321 0.033 -0.044 322 -0.002 -0.038 323 -0.081 0.084
324 0.007 -0.100 325 -0.001 -0.113 326 -0.021 -0.005 327 0.136 -0.105
328 0.098 -0.044 329 0.011 -0.002 330 -0.033 0.044 331 -0.060 0.124
332 0.010 0.097 333 0.000 -0.008 334 0.018 -0.083 335 -0.069 0.027
336 -0.219 0.000 337 -0.069 -0.027 338 0.018 0.083 339 0.000 0.008
340 0.010 -0.097 341 -0.060 -0.124 342 -0.033 -0.044 343 0.011 0.002
344 0.098 0.044 345 0.136 0.105 346 -0.021 0.005 347 -0.001 0.113
348 0.007 0.100 349 -0.081 -0.084 350 -0.002 0.038 351 0.033 0.044
352 0.062 0.000 353 0.057 0.052 354 0.016 0.174 355 0.035 0.116
356 -0.051 -0.202 357 0.011 0.036 358 0.089 0.209 359 -0.049 -0.008
360 -0.035 0.044 361 0.017 -0.059 362 0.053 -0.017 363 0.099 0.100
364 0.034 -0.148 365 -0.003 -0.094 366 -0.120 0.042 367 -0.136 -0.070
368 -0.031 0.000 369 -0.136 0.070 370 -0.120 -0.042 371 -0.003 0.094
372 0.034 0.148 373 0.099 -0.100 374 0.053 0.017 375 0.017 0.059
376 -0.035 -0.044 377 -0.049 0.008 378 0.089 -0.209 379 0.011 -0.036
380 -0.051 0.202 381 0.035 -0.116 382 0.016 -0.174 383 0.057 -0.052
384 0.062 0.000 385 0.033 -0.044 386 -0.002 -0.038 387 -0.081 0.084
388 0.007 -0.100 389 -0.001 -0.113 390 -0.021 -0.005 391 0.136 -0.105
392 0.098 -0.044 393 0.011 -0.002 394 -0.033 0.044 395 -0.060 0.124
396 0.010 0.097 397 0.000 -0.008 398 0.018 -0.083 399 -0.069 0.027
400 -0.139 0.050 401 0.004 0.014 402 0.011 -0.100 403 -0.097 -0.020
404 0.062 0.081 405 0.124 0.139 406 0.104 -0.015 407 0.173 -0.140
408 -0.040 0.006 409 -0.133 0.009 410 -0.002 -0.043 411 -0.047 0.092
412 -0.109 0.082 413 -0.024 0.010 414 0.096 0.019 415 0.019 -0.023
416 -0.087 -0.049 417 0.002 0.058 418 -0.021 0.228 419 -0.103 0.023
420 -0.019 -0.175 421 0.018 0.132 422 -0.071 0.160 423 -0.153 -0.062
424 -0.107 0.028 425 0.055 0.140 426 0.070 0.103 427 -0.056 0.025
428 -0.043 0.002 429 0.016 -0.118 430 0.026 -0.071 431 0.033 0.177
432 0.020 -0.021 433 0.035 -0.088 434 -0.008 0.101 435 -0.035 -0.010
436 0.065 0.030 437 0.092 -0.034 438 0.032 -0.123 439 -0.018 0.092
440 0.000 -0.006 441 -0.006 -0.056 442 -0.019 0.040 443 0.053 -0.131
444 0.022 -0.133 445 0.104 -0.032 446 0.163 -0.045 447 -0.105 -0.030
448 -0.110 -0.069 449 -0.008 -0.092 450 -0.049 -0.043 451 0.085 -0.017
452 0.090 0.063 453 0.015 0.153 454 0.049 0.094 455 0.011 0.034
456 -0.012 0.012 457 -0.015 -0.017 458 -0.061 0.031 459 -0.070 -0.040
460 0.011 -0.109 461 0.037 -0.060 462 -0.003 -0.178 463 -0.007 -0.128
464 -0.059 0.100 465 0.004 0.014 466 0.011 -0.100 467 -0.097 -0.020
468 0.062 0.081 469 0.124 0.139 470 0.104 -0.015 471 0.173 -0.140
472 -0.040 0.006 473 -0.133 0.009 474 -0.002 -0.043 475 -0.047 0.092
476 -0.109 0.082 477 -0.024 0.010 478 0.096 0.019 479 0.019 -0.023
480 -0.058 0.016 481 -0.096 -0.045 482 -0.110 0.003 483 -0.070 0.216
484 -0.040 0.059 485 0.010 -0.056 486 0.034 0.065 487 0.117 0.033
488 0.078 -0.133 489 -0.043 -0.146 490 0.158 -0.071 491 0.254 -0.021
492 0.068 0.117 493 -0.044 0.114 494 -0.035 0.041 495 0.085 0.070
496 0.120 0.010 497 0.057 0.055 498 0.063 0.188 499 0.091 0.149
500 -0.017 -0.039 501 -0.078 -0.075 502 0.049 0.079 503 -0.014 -0.007
504 0.030 -0.027 505 0.080 0.054 506 -0.186 -0.067 507 -0.039 -0.027
508 0.043 -0.072 509 -0.092 -0.089 510 0.029 0.105 511 -0.144 0.003
512 -0.069 -0.041 513 0.132 0.057 514 -0.126 0.070 515 -0.031 0.109
516 0.161 -0.009 517 0.056 -0.046 518 -0.004 0.028 519 -0.049 0.000
520 -0.078 -0.005 521 0.015 -0.087 522 0.149 -0.104 523 -0.021 -0.051
524 -0.154 -0.106 525 0.024 0.030 526 0.046 0.123 527 -0.004 -0.098
528 -0.061 -0.128 529 -0.024 -0.038 530 0.066 -0.048 531 -0.067 0.027
532 0.054 -0.050 533 0.171 -0.049 534 -0.108 0.132 535 -0.161 -0.019
536 -0.070 -0.072 537 -0.177 0.049 538 -0.172 -0.050 539 0.051 -0.075
540 0.122 -0.057 541 0.009 -0.044 542 -0.012 -0.021 543 0.004 0.009
544 -0.030 0.081 545 -0.096 -0.045 546 -0.110 0.003 547 -0.070 0.216
548 -0.040 0.059 549 0.010 -0.056 550 0.034 0.065 551 0.117 0.033
552 0.078 -0.133 553 -0.043 -0.146 554 0.158 -0.071 555 0.254 -0.021
556 0.068 0.117 557 -0.044 0.114 558 -0.035 0.041 559 0.085 0.070
560 0.001 0.011 561 -0.099 -0.048 562 0.054 -0.196 563 0.124 0.035
564 0.092 0.045 565 -0.037 -0.066 566 -0.021 -0.004 567 0.042 -0.065
568 0.061 0.048 569 0.046 0.004 570 -0.063 -0.045 571 -0.102 0.152
572 -0.039 -0.019 573 -0.005 -0.106 574 0.083 0.031 575 0.226 0.028
576 0.140 -0.010 577 -0.132 -0.033 578 -0.116 0.088 579 0.023 0.052
580 -0.171 -0.080 581 -0.246 -0.025 582 -0.062 -0.038 583 -0.055 -0.062
584 -0.004 -0.060 585 0.034 0.000 586 -0.030 0.021 587 0.075 -0.122
588 0.043 -0.080 589 -0.022 0.041 590 0.026 0.013 591 -0.031 -0.018
592 0.059 0.008 593 0.109 0.078 594 0.002 0.101 595 -0.016 0.054
596 -0.059 0.070 597 0.017 0.114 598 0.104 -0.034 599 -0.024 -0.059
600 -0.081 0.051 601 -0.040 -0.069 602 -0.069 0.058 603 -0.067 0.117
604 0.007 -0.131 605 0.009 0.028 606 0.075 0.117 607 0.118 0.030
608 -0.041 0.148 609 0.005 0.098 610 0.026 0.002 611 -0.116 0.045
612 -0.020 0.084 613 0.101 0.006 614 0.205 -0.064 615 0.073 -0.063
616 -0.174 -0.118 617 -0.024 0.026 618 -0.041 0.129 619 -0.042 -0.053
620 0.148 -0.126 621 -0.030 -0.049 622 -0.015 -0.021 623 0.089 -0.069
624 -0.119 0.011 625 -0.099 -0.048 626 0.054 -0.196 627 0.124 0.035
628 0.092 0.045 629 -0.037 -0.066 630 -0.021 -0.004 631 0.042 -0.065
632 0.061 0.048 633 0.046 0.004 634 -0.063 -0.045 635 -0.102 0.152
636 -0.039 -0.019 637 -0.005 -0.106 638 0.083 0.031 639 0.226 0.028
640 0.085 -0.065 641 0.034 -0.142 642 0.004 -0.012 643 0.126 -0.043
644 0.055 0.068 645 -0.020 0.077 646 0.008 -0.056 647 -0.034 0.046
648 -0.040 -0.134 649 -0.056 -0.131 650 0.014 0.097 651 0.045 -0.009
652 -0.113 -0.170 653 -0.065 -0.230 654 0.065 -0.011 655 0.011 0.048
656 -0.091 -0.059 657 -0.110 0.024 658 0.074 -0.034 659 0.124 0.022
660 -0.037 0.071 661 0.015 0.002 662 0.028 0.099 663 -0.062 0.068
664 0.064 0.016 665 0.078 0.156 666 0.009 0.219 667 0.147 0.024
668 0.106 0.030 669 -0.080 0.143 670 -0.049 -0.100 671 -0.036 -0.082
672 -0.089 0.021 673 -0.070 -0.029 674 -0.086 0.048 675 -0.066 -0.015
676 -0.024 0.002 677 -0.030 -0.023 678 -0.032 0.020 679 -0.002 0.212
680 0.158 -0.024 681 0.141 -0.119 682 -0.146 0.058 683 -0.155 0.083
684 -0.002 -0.030 685 0.018 -0.129 686 0.012 -0.018 687 -0.008 -0.037
688 0.031 0.040 689 0.023 0.097 690 0.014 -0.039 691 0.050 0.019
692 -0.072 -0.141 693 -0.023 -0.051 694 0.024 0.099 695 -0.127 -0.116
696 0.094 0.102 697 0.183 0.098 698 -0.040 -0.020 699 0.065 0.077
700 0.088 -0.147 701 -0.039 -0.059 702 -0.057 0.124 703 -0.077 0.020
704 0.030 -0.120 705 0.034 -0.142 706 0.004 -0.012 707 0.126 -0.043
708 0.055 0.068 709 -0.020 0.077 710 0.008 -0.056 711 -0.034 0.046
712 -0.040 -0.134 713 -0.056 -0.131 714 0.014 0.097 715 0.045 -0.009
716 -0.113 -0.170 717 -0.065 -0.230 718 0.065 -0.011 719 0.011 0.048
720 -0.026 -0.021 721 -0.002 0.041 722 0.001 0.071 723 -0.037 -0.117
724 -0.106 -0.062 725 0.002 0.057 726 -0.008 -0.011 727 0.019 0.072
728 0.016 0.059 729 -0.065 -0.077 730 0.142 -0.062 731 0.087 0.025
732 -0.003 -0.103 733 0.107 -0.152 734 -0.054 0.036 735 -0.030 -0.003
736 0.058 -0.020 737 -0.028 0.007 738 -0.027 -0.099 739 0.049 -0.075
740 0.174 0.031 741 0.134 0.156 742 0.060 0.077 743 -0.010 -0.022
744 -0.084 0.040 745 -0.074 0.011 746 -0.163 0.054 747 -0.052 -0.008
748 0.076 -0.042 749 0.043 0.101 750 0.058 -0.018 751 0.003 -0.090
752 0.059 -0.018 753 0.023 -0.031 754 0.007 -0.017 755 0.066 -0.017
756 -0.135 -0.098 757 -0.056 -0.081 758 0.089 0.154 759 0.120 0.122
760 0.102 0.001 761 -0.141 0.102 762 0.006 -0.011 763 0.057 -0.039
764 -0.059 0.066 765 0.132 0.111 766 0.012 0.114 767 0.047 -0.106
768 0.160 -0.099 769 -0.076 0.084 770 -0.049 0.073 771 0.005 -0.086
772 -0.052 -0.108 773 -0.073 0.129 774 -0.129 -0.034 775 -0.153 -0.111
776 -0.193 0.098 777 -0.107 -0.068 778 0.004 -0.009 779 -0.039 0.024
780 -0.054 -0.079 781 0.024 0.084 782 0.052 -0.002 783 0.028 -0.044
784 0.040 0.018 785 -0.002 0.041 786 0.001 0.071 787 -0.037 -0.117
788 -0.106 -0.062 789 0.002 0.057 790 -0.008 -0.011 791 0.019 0.072
792 0.016 0.059 793 -0.065 -0.077 794 0.142 -0.062 795 0.087 0.025
796 -0.003 -0.103 797 0.107 -0.152 798 -0.054 0.036 799 -0.030 -0.003
800 0.039 -0.090 801 0.029 0.025 802 0.086 -0.029 803 0.087 -0.082
804 0.003 -0.036 805 -0.096 -0.089 806 -0.073 -0.046 807 0.105 -0.020
808 0.193 0.018 809 -0.053 -0.073 810 -0.118 -0.149 811 0.019 -0.019
812 -0.042 0.026 813 0.041 0.009 814 0.028 -0.076 815 -0.038 -0.068
816 -0.011 0.010 817 -0.134 -0.064 818 0.069 -0.067 819 0.057 0.006
820 -0.134 0.098 821 0.152 0.036 822 0.041 -0.085 823 -0.099 -0.049
824 0.089 -0.099 825 -0.046 0.018 826 -0.112 0.135 827 -0.064 0.018
828 -0.022 0.053 829 0.041 0.077 830 -0.021 0.145 831 0.007 0.179
832 0.059 0.041 833 0.023 0.064 834 0.062 0.022 835 0.110 -0.081
836 -0.016 -0.054 837 -0.014 -0.017 838 0.171 0.008 839 0.070 -0.027
840 -0.015 0.002 841 -0.012 0.053 842 -0.125 0.009 843 -0.040 0.012
844 0.036 0.114 845 0.007 0.090 846 -0.016 -0.082 847 -0.008 -0.013
848 0.091 0.030 849 0.072 -0.068 850 0.051 0.063 851 -0.004 0.049
852 -0.130 -0.048 853 -0.121 0.061 854 -0.095 0.078 855 0.011 0.005
856 0.049 0.001 857 -0.014 -0.011 858 0.009 -0.063 859 -0.031 0.040
860 -0.011 0.004 861 -0.033 -0.111 862 -0.115 0.137 863 -0.025 0.049
864 0.020 -0.160 865 0.029 0.025 866 0.086 -0.029 867 0.087 -0.082
868 0.003 -0.036 869 -0.096 -0.089 870 -0.073 -0.046 871 0.105 -0.020
872 0.193 0.018 873 -0.053 -0.073 874 -0.118 -0.149 875 0.019 -0.019
876 -0.042 0.026 877 0.041 0.009 878 0.028 -0.076 879 -0.038 -0.068
880 -0.006 0.005 000 00000 00000 000 00000 000000 000 000000 000000];
% Discard columns of indices
table_G24(:,1:3:end) = [];
% Convert to complex
table_G24 = complex(table_G24(:,1:2:end), table_G24(:,2:2:end));
% Stack in order
table_G24 = reshape(table_G24.', [], 1);
% Discard zero-padding
table_G24 = table_G24(1:880);

% Sanity check (up to 3 decimal places)
table_G24_err = whole_packet - table_G24;
table_G24_err = [real(table_G24_err); imag(table_G24_err)];
assert(all(abs(table_G24_err) < 0.001));

disp('Done.');